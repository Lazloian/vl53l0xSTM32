
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003470  08003470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003484  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003484  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000727e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000135b  00000000  00000000  000272ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  00028d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d907  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a75  00000000  00000000  00046ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b35ae  00000000  00000000  0004d71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  00100d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003438 	.word	0x08003438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003438 	.word	0x08003438

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_GPIO_Init+0x98>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <MX_GPIO_Init+0x98>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_GPIO_Init+0x98>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_GPIO_Init+0x98>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MX_GPIO_Init+0x98>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_GPIO_Init+0x98>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_GPIO_Init+0x98>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <MX_GPIO_Init+0x98>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_GPIO_Init+0x98>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000538:	f001 fb52 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800053c:	2302      	movs	r3, #2
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_GPIO_Init+0x9c>)
 8000554:	f001 f9aa 	bl	80018ac <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40023800 	.word	0x40023800
 8000564:	40020800 	.word	0x40020800

08000568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_I2C1_Init+0x50>)
 800056e:	4a13      	ldr	r2, [pc, #76]	; (80005bc <MX_I2C1_Init+0x54>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_I2C1_Init+0x50>)
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_I2C1_Init+0x58>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_I2C1_Init+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_I2C1_Init+0x50>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_I2C1_Init+0x50>)
 8000586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800058a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_I2C1_Init+0x50>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_I2C1_Init+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_I2C1_Init+0x50>)
 80005a6:	f001 fb35 	bl	8001c14 <HAL_I2C_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005b0:	f000 ff64 	bl	800147c <Error_Handler>
  }

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000028 	.word	0x20000028
 80005bc:	40005400 	.word	0x40005400
 80005c0:	000186a0 	.word	0x000186a0

080005c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a19      	ldr	r2, [pc, #100]	; (8000648 <HAL_I2C_MspInit+0x84>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d12b      	bne.n	800063e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_I2C_MspInit+0x88>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_I2C_MspInit+0x88>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_I2C_MspInit+0x88>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000602:	23c0      	movs	r3, #192	; 0xc0
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000606:	2312      	movs	r3, #18
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000612:	2304      	movs	r3, #4
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <HAL_I2C_MspInit+0x8c>)
 800061e:	f001 f945 	bl	80018ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_I2C_MspInit+0x88>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_I2C_MspInit+0x88>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_I2C_MspInit+0x88>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40005400 	.word	0x40005400
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 ffad 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f831 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f7ff ff31 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000666:	f7ff ff7f 	bl	8000568 <MX_I2C1_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  VL53L0X_Init();
 800066a:	f000 facd 	bl	8000c08 <VL53L0X_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  state=HAL_I2C_GetState(&hi2c1);
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x64>)
 8000670:	f001 ff28 	bl	80024c4 <HAL_I2C_GetState>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	  if(state==HAL_I2C_STATE_READY||state==HAL_I2C_STATE_BUSY_RX)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b20      	cmp	r3, #32
 800067c:	d002      	beq.n	8000684 <main+0x30>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b22      	cmp	r3, #34	; 0x22
 8000682:	d105      	bne.n	8000690 <main+0x3c>
	  {
		  measurement = readRangeSingleMil();
 8000684:	f000 f8f2 	bl	800086c <readRangeSingleMil>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <main+0x68>)
 800068e:	801a      	strh	r2, [r3, #0]
	  }
	  if (measurement >= 100)
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <main+0x68>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2b63      	cmp	r3, #99	; 0x63
 8000696:	d905      	bls.n	80006a4 <main+0x50>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2102      	movs	r1, #2
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <main+0x6c>)
 800069e:	f001 fa9f 	bl	8001be0 <HAL_GPIO_WritePin>
 80006a2:	e004      	b.n	80006ae <main+0x5a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2102      	movs	r1, #2
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <main+0x6c>)
 80006aa:	f001 fa99 	bl	8001be0 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 80006ae:	2064      	movs	r0, #100	; 0x64
 80006b0:	f000 fff4 	bl	800169c <HAL_Delay>
	  state=HAL_I2C_GetState(&hi2c1);
 80006b4:	e7db      	b.n	800066e <main+0x1a>
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028
 80006bc:	2000007e 	.word	0x2000007e
 80006c0:	40020800 	.word	0x40020800

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fea8 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	; 0xa8
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fa21 	bl	8002b90 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fe92 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2105      	movs	r1, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fc7a 	bl	8003070 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 fe7b 	bl	800147c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <VL53L0X_Write_Value>:
	command[0] = channels;
    i2cStats = HAL_I2C_Mem_Write(&hi2c1, TCA_DEV_ADD << 1, 0x00, I2C_MEMADD_SIZE_8BIT, command, 1, 100);
}

HAL_StatusTypeDef VL53L0X_Write_Value(unsigned char reg, unsigned char value)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af04      	add	r7, sp, #16
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
	unsigned char command[1];
	command[0] = value;
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	733b      	strb	r3, [r7, #12]
	return HAL_I2C_Mem_Write(&hi2c1, VL53L0X_DEV_ADD << 1, reg, I2C_MEMADD_SIZE_8BIT, command, 1, 100);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	2301      	movs	r3, #1
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	2152      	movs	r1, #82	; 0x52
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <VL53L0X_Write_Value+0x3c>)
 80007c4:	f001 fb5e 	bl	8001e84 <HAL_I2C_Mem_Write>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028

080007d8 <performSingleRefCalibration>:

int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af04      	add	r7, sp, #16
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  i2cStats = VL53L0X_Write_Value( SYSRANGE_START,  0x01 | vhv_init_byte);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ffd3 	bl	8000798 <VL53L0X_Write_Value>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <performSingleRefCalibration+0x8c>)
 80007f8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(20);
 80007fa:	2014      	movs	r0, #20
 80007fc:	f000 ff4e 	bl	800169c <HAL_Delay>

  unsigned char tmp[2];
  do
  {
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, RESULT_INTERRUPT_STATUS, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	9302      	str	r3, [sp, #8]
 8000804:	2301      	movs	r3, #1
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	2213      	movs	r2, #19
 8000812:	2152      	movs	r1, #82	; 0x52
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <performSingleRefCalibration+0x90>)
 8000816:	f001 fc2f 	bl	8002078 <HAL_I2C_Mem_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <performSingleRefCalibration+0x8c>)
 8000820:	701a      	strb	r2, [r3, #0]
    tmp[0] &= 0x07;
 8000822:	7b3b      	ldrb	r3, [r7, #12]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	b2db      	uxtb	r3, r3
 800082a:	733b      	strb	r3, [r7, #12]
  } while (tmp[0] == 0);
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0e6      	beq.n	8000800 <performSingleRefCalibration+0x28>

  i2cStats = VL53L0X_Write_Value( SYSTEM_INTERRUPT_CLEAR, 0x01 | vhv_init_byte);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4619      	mov	r1, r3
 800083c:	200b      	movs	r0, #11
 800083e:	f7ff ffab 	bl	8000798 <VL53L0X_Write_Value>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <performSingleRefCalibration+0x8c>)
 8000848:	701a      	strb	r2, [r3, #0]

  i2cStats = VL53L0X_Write_Value( SYSRANGE_START, 0x00);
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffa3 	bl	8000798 <VL53L0X_Write_Value>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <performSingleRefCalibration+0x8c>)
 8000858:	701a      	strb	r2, [r3, #0]

  return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000007d 	.word	0x2000007d
 8000868:	20000028 	.word	0x20000028

0800086c <readRangeSingleMil>:

uint16_t readRangeSingleMil (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af04      	add	r7, sp, #16

    //Write 1
    i2cStats = VL53L0X_Write_Value( 0x80, 0x01);
 8000872:	2101      	movs	r1, #1
 8000874:	2080      	movs	r0, #128	; 0x80
 8000876:	f7ff ff8f 	bl	8000798 <VL53L0X_Write_Value>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <readRangeSingleMil+0xd4>)
 8000880:	701a      	strb	r2, [r3, #0]

    //Write 2
    i2cStats = VL53L0X_Write_Value( 0xFF, 0x01);
 8000882:	2101      	movs	r1, #1
 8000884:	20ff      	movs	r0, #255	; 0xff
 8000886:	f7ff ff87 	bl	8000798 <VL53L0X_Write_Value>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <readRangeSingleMil+0xd4>)
 8000890:	701a      	strb	r2, [r3, #0]

    //Write 3
    i2cStats = VL53L0X_Write_Value( 0x00, 0x00);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff ff7f 	bl	8000798 <VL53L0X_Write_Value>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <readRangeSingleMil+0xd4>)
 80008a0:	701a      	strb	r2, [r3, #0]

    //Write 4
    i2cStats = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_DEV_ADD << 1, 0x91, I2C_MEMADD_SIZE_8BIT, stop_variable, 1, 100);
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	2301      	movs	r3, #1
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <readRangeSingleMil+0xd8>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	2291      	movs	r2, #145	; 0x91
 80008b2:	2152      	movs	r1, #82	; 0x52
 80008b4:	4824      	ldr	r0, [pc, #144]	; (8000948 <readRangeSingleMil+0xdc>)
 80008b6:	f001 fae5 	bl	8001e84 <HAL_I2C_Mem_Write>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <readRangeSingleMil+0xd4>)
 80008c0:	701a      	strb	r2, [r3, #0]

    //Write 5
    i2cStats = VL53L0X_Write_Value( 0x00, 0x01);
 80008c2:	2101      	movs	r1, #1
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff67 	bl	8000798 <VL53L0X_Write_Value>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <readRangeSingleMil+0xd4>)
 80008d0:	701a      	strb	r2, [r3, #0]

    //Write 6
    i2cStats = VL53L0X_Write_Value( 0xFF, 0x00);
 80008d2:	2100      	movs	r1, #0
 80008d4:	20ff      	movs	r0, #255	; 0xff
 80008d6:	f7ff ff5f 	bl	8000798 <VL53L0X_Write_Value>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <readRangeSingleMil+0xd4>)
 80008e0:	701a      	strb	r2, [r3, #0]

    //Write 7
    i2cStats = VL53L0X_Write_Value( 0x80, 0x00);
 80008e2:	2100      	movs	r1, #0
 80008e4:	2080      	movs	r0, #128	; 0x80
 80008e6:	f7ff ff57 	bl	8000798 <VL53L0X_Write_Value>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <readRangeSingleMil+0xd4>)
 80008f0:	701a      	strb	r2, [r3, #0]

    //Write 8
    i2cStats = VL53L0X_Write_Value( SYSRANGE_START,  0x01);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff4f 	bl	8000798 <VL53L0X_Write_Value>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <readRangeSingleMil+0xd4>)
 8000900:	701a      	strb	r2, [r3, #0]

    // "Wait until start bit has been cleared"
  unsigned char tmp[2];
  do
  {
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, SYSRANGE_START, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2200      	movs	r2, #0
 8000912:	2152      	movs	r1, #82	; 0x52
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <readRangeSingleMil+0xdc>)
 8000916:	f001 fbaf 	bl	8002078 <HAL_I2C_Mem_Read>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <readRangeSingleMil+0xd4>)
 8000920:	701a      	strb	r2, [r3, #0]
    tmp[0] &= 0x01;
 8000922:	793b      	ldrb	r3, [r7, #4]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	713b      	strb	r3, [r7, #4]
  } while (tmp[0]);
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1e7      	bne.n	8000902 <readRangeSingleMil+0x96>

    return readRangeContinousMil();
 8000932:	f000 f80b 	bl	800094c <readRangeContinousMil>
 8000936:	4603      	mov	r3, r0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000007d 	.word	0x2000007d
 8000944:	2000007c 	.word	0x2000007c
 8000948:	20000028 	.word	0x20000028

0800094c <readRangeContinousMil>:

uint16_t readRangeContinousMil(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af04      	add	r7, sp, #16
  unsigned char tmp[2];

  do
  {
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, RESULT_INTERRUPT_STATUS, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000952:	2364      	movs	r3, #100	; 0x64
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	2213      	movs	r2, #19
 8000962:	2152      	movs	r1, #82	; 0x52
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <readRangeContinousMil+0x80>)
 8000966:	f001 fb87 	bl	8002078 <HAL_I2C_Mem_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <readRangeContinousMil+0x84>)
 8000970:	701a      	strb	r2, [r3, #0]
    tmp[0] &= 0x07;
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	b2db      	uxtb	r3, r3
 800097a:	713b      	strb	r3, [r7, #4]
  } while (tmp[0] == 0);
 800097c:	793b      	ldrb	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0e7      	beq.n	8000952 <readRangeContinousMil+0x6>

  i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, RESULT_RANGE_STATUS + 10, I2C_MEMADD_SIZE_8BIT, tmp, 2, 100);
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2302      	movs	r3, #2
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2301      	movs	r3, #1
 8000990:	221e      	movs	r2, #30
 8000992:	2152      	movs	r1, #82	; 0x52
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <readRangeContinousMil+0x80>)
 8000996:	f001 fb6f 	bl	8002078 <HAL_I2C_Mem_Read>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <readRangeContinousMil+0x84>)
 80009a0:	701a      	strb	r2, [r3, #0]

  uint16_t range = (tmp[0] << 8) | tmp[1];
 80009a2:	793b      	ldrb	r3, [r7, #4]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	80fb      	strh	r3, [r7, #6]

  i2cStats = VL53L0X_Write_Value(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80009b2:	2101      	movs	r1, #1
 80009b4:	200b      	movs	r0, #11
 80009b6:	f7ff feef 	bl	8000798 <VL53L0X_Write_Value>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <readRangeContinousMil+0x84>)
 80009c0:	701a      	strb	r2, [r3, #0]


  return range;
 80009c2:	88fb      	ldrh	r3, [r7, #6]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000028 	.word	0x20000028
 80009d0:	2000007d 	.word	0x2000007d

080009d4 <setSignalRateLimit>:

void setSignalRateLimit(float limit_Mcps)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	ed87 0a01 	vstr	s0, [r7, #4]
  //Error checking not added.  Make sure limit_Mcps is between 0 and 511.99

  //Need to verify how HAL handles multiple bits

  i2cStats = VL53L0X_Write_Value( FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,  limit_Mcps * (1 << 7));
 80009de:	edd7 7a01 	vldr	s15, [r7, #4]
 80009e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a10 <setSignalRateLimit+0x3c>
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ee:	edc7 7a00 	vstr	s15, [r7]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	2044      	movs	r0, #68	; 0x44
 80009fa:	f7ff fecd 	bl	8000798 <VL53L0X_Write_Value>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <setSignalRateLimit+0x40>)
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	43000000 	.word	0x43000000
 8000a14:	2000007d 	.word	0x2000007d

08000a18 <getSpadInfo>:

int getSpadInfo(uint8_t* count, uint8_t* type_is_aperture)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    unsigned char tmp[1]; // holds data from register

    i2cStats = VL53L0X_Write_Value(0x80, 0x01);
 8000a22:	2101      	movs	r1, #1
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	f7ff feb7 	bl	8000798 <VL53L0X_Write_Value>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b74      	ldr	r3, [pc, #464]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a30:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000a32:	2101      	movs	r1, #1
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	f7ff feaf 	bl	8000798 <VL53L0X_Write_Value>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a40:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x00, 0x00);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fea7 	bl	8000798 <VL53L0X_Write_Value>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b6c      	ldr	r3, [pc, #432]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a50:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x06);
 8000a52:	2106      	movs	r1, #6
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	f7ff fe9f 	bl	8000798 <VL53L0X_Write_Value>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b68      	ldr	r3, [pc, #416]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a60:	701a      	strb	r2, [r3, #0]

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, 0x83, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	2283      	movs	r2, #131	; 0x83
 8000a74:	2152      	movs	r1, #82	; 0x52
 8000a76:	4863      	ldr	r0, [pc, #396]	; (8000c04 <getSpadInfo+0x1ec>)
 8000a78:	f001 fafe 	bl	8002078 <HAL_I2C_Mem_Read>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a82:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x83, tmp[0] | 0x04);
 8000a84:	7b3b      	ldrb	r3, [r7, #12]
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2083      	movs	r0, #131	; 0x83
 8000a90:	f7ff fe82 	bl	8000798 <VL53L0X_Write_Value>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <getSpadInfo+0x1e8>)
 8000a9a:	701a      	strb	r2, [r3, #0]

    i2cStats = VL53L0X_Write_Value(0xFF, 0x07);
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	20ff      	movs	r0, #255	; 0xff
 8000aa0:	f7ff fe7a 	bl	8000798 <VL53L0X_Write_Value>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <getSpadInfo+0x1e8>)
 8000aaa:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x81, 0x01);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2081      	movs	r0, #129	; 0x81
 8000ab0:	f7ff fe72 	bl	8000798 <VL53L0X_Write_Value>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <getSpadInfo+0x1e8>)
 8000aba:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x01);
 8000abc:	2101      	movs	r1, #1
 8000abe:	2080      	movs	r0, #128	; 0x80
 8000ac0:	f7ff fe6a 	bl	8000798 <VL53L0X_Write_Value>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <getSpadInfo+0x1e8>)
 8000aca:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x94, 0x6b);
 8000acc:	216b      	movs	r1, #107	; 0x6b
 8000ace:	2094      	movs	r0, #148	; 0x94
 8000ad0:	f7ff fe62 	bl	8000798 <VL53L0X_Write_Value>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <getSpadInfo+0x1e8>)
 8000ada:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x83, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2083      	movs	r0, #131	; 0x83
 8000ae0:	f7ff fe5a 	bl	8000798 <VL53L0X_Write_Value>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <getSpadInfo+0x1e8>)
 8000aea:	701a      	strb	r2, [r3, #0]

    do {
        i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, 0x83, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	2301      	movs	r3, #1
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	2283      	movs	r2, #131	; 0x83
 8000afe:	2152      	movs	r1, #82	; 0x52
 8000b00:	4840      	ldr	r0, [pc, #256]	; (8000c04 <getSpadInfo+0x1ec>)
 8000b02:	f001 fab9 	bl	8002078 <HAL_I2C_Mem_Read>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b0c:	701a      	strb	r2, [r3, #0]
    } while (tmp[0] == 0x00);
 8000b0e:	7b3b      	ldrb	r3, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0eb      	beq.n	8000aec <getSpadInfo+0xd4>

    i2cStats = VL53L0X_Write_Value(0x83, 0x01);
 8000b14:	2101      	movs	r1, #1
 8000b16:	2083      	movs	r0, #131	; 0x83
 8000b18:	f7ff fe3e 	bl	8000798 <VL53L0X_Write_Value>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b22:	701a      	strb	r2, [r3, #0]

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, 0x92, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	2292      	movs	r2, #146	; 0x92
 8000b36:	2152      	movs	r1, #82	; 0x52
 8000b38:	4832      	ldr	r0, [pc, #200]	; (8000c04 <getSpadInfo+0x1ec>)
 8000b3a:	f001 fa9d 	bl	8002078 <HAL_I2C_Mem_Read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b44:	701a      	strb	r2, [r3, #0]

    *count = tmp[0] & 0x7f;
 8000b46:	7b3b      	ldrb	r3, [r7, #12]
 8000b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	701a      	strb	r2, [r3, #0]
    *type_is_aperture = (tmp[0] >> 7) & 0x01;
 8000b52:	7b3b      	ldrb	r3, [r7, #12]
 8000b54:	09db      	lsrs	r3, r3, #7
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	701a      	strb	r2, [r3, #0]

    i2cStats = VL53L0X_Write_Value(0x81, 0x00);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2081      	movs	r0, #129	; 0x81
 8000b60:	f7ff fe1a 	bl	8000798 <VL53L0X_Write_Value>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b6a:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x06);
 8000b6c:	2106      	movs	r1, #6
 8000b6e:	20ff      	movs	r0, #255	; 0xff
 8000b70:	f7ff fe12 	bl	8000798 <VL53L0X_Write_Value>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b7a:	701a      	strb	r2, [r3, #0]

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, 0x83, I2C_MEMADD_SIZE_8BIT, tmp, 1, 100);
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	2301      	movs	r3, #1
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2283      	movs	r2, #131	; 0x83
 8000b8e:	2152      	movs	r1, #82	; 0x52
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <getSpadInfo+0x1ec>)
 8000b92:	f001 fa71 	bl	8002078 <HAL_I2C_Mem_Read>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <getSpadInfo+0x1e8>)
 8000b9c:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x83, tmp[0] & ~0x04);
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	f023 0304 	bic.w	r3, r3, #4
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	2083      	movs	r0, #131	; 0x83
 8000baa:	f7ff fdf5 	bl	8000798 <VL53L0X_Write_Value>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <getSpadInfo+0x1e8>)
 8000bb4:	701a      	strb	r2, [r3, #0]

    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	20ff      	movs	r0, #255	; 0xff
 8000bba:	f7ff fded 	bl	8000798 <VL53L0X_Write_Value>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <getSpadInfo+0x1e8>)
 8000bc4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x00, 0x01);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fde5 	bl	8000798 <VL53L0X_Write_Value>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <getSpadInfo+0x1e8>)
 8000bd4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	20ff      	movs	r0, #255	; 0xff
 8000bda:	f7ff fddd 	bl	8000798 <VL53L0X_Write_Value>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <getSpadInfo+0x1e8>)
 8000be4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x00);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2080      	movs	r0, #128	; 0x80
 8000bea:	f7ff fdd5 	bl	8000798 <VL53L0X_Write_Value>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <getSpadInfo+0x1e8>)
 8000bf4:	701a      	strb	r2, [r3, #0]

    return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000007d 	.word	0x2000007d
 8000c04:	20000028 	.word	0x20000028

08000c08 <VL53L0X_Init>:

int VL53L0X_Init()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af04      	add	r7, sp, #16
    unsigned char initData[1]; // to hold data needed for init
    unsigned char ref_spad_map[6];
    uint8_t spad_count;
    uint8_t spad_type_is_aperture;
    uint8_t first_spad_to_enable;
    uint8_t spads_enabled = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]


    // check if the model ID is the same as the datasheet
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, IDENTIFICATION_MODEL_ID, I2C_MEMADD_SIZE_8BIT, initData, 1, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	22c0      	movs	r2, #192	; 0xc0
 8000c24:	2152      	movs	r1, #82	; 0x52
 8000c26:	4887      	ldr	r0, [pc, #540]	; (8000e44 <VL53L0X_Init+0x23c>)
 8000c28:	f001 fa26 	bl	8002078 <HAL_I2C_Mem_Read>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b85      	ldr	r3, [pc, #532]	; (8000e48 <VL53L0X_Init+0x240>)
 8000c32:	701a      	strb	r2, [r3, #0]

    if (initData[0] != 0xEE)
 8000c34:	7b3b      	ldrb	r3, [r7, #12]
 8000c36:	2bee      	cmp	r3, #238	; 0xee
 8000c38:	d002      	beq.n	8000c40 <VL53L0X_Init+0x38>
    {
        return 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f000 bc16 	b.w	800146c <VL53L0X_Init+0x864>
    }

    //* VL53L0X_DataInit() begin

    // set sensor to 3.3v mode
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, I2C_MEMADD_SIZE_8BIT, initData, 1, 100);
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	2301      	movs	r3, #1
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2289      	movs	r2, #137	; 0x89
 8000c52:	2152      	movs	r1, #82	; 0x52
 8000c54:	487b      	ldr	r0, [pc, #492]	; (8000e44 <VL53L0X_Init+0x23c>)
 8000c56:	f001 fa0f 	bl	8002078 <HAL_I2C_Mem_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <VL53L0X_Init+0x240>)
 8000c60:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, initData[0] | 0x01);
 8000c62:	7b3b      	ldrb	r3, [r7, #12]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2089      	movs	r0, #137	; 0x89
 8000c6e:	f7ff fd93 	bl	8000798 <VL53L0X_Write_Value>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <VL53L0X_Init+0x240>)
 8000c78:	701a      	strb	r2, [r3, #0]

    // set I2C standard mode
    i2cStats = VL53L0X_Write_Value(0x88, 0x00);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2088      	movs	r0, #136	; 0x88
 8000c7e:	f7ff fd8b 	bl	8000798 <VL53L0X_Write_Value>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <VL53L0X_Init+0x240>)
 8000c88:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x01);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2080      	movs	r0, #128	; 0x80
 8000c8e:	f7ff fd83 	bl	8000798 <VL53L0X_Write_Value>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <VL53L0X_Init+0x240>)
 8000c98:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	20ff      	movs	r0, #255	; 0xff
 8000c9e:	f7ff fd7b 	bl	8000798 <VL53L0X_Write_Value>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <VL53L0X_Init+0x240>)
 8000ca8:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x00, 0x00);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd73 	bl	8000798 <VL53L0X_Write_Value>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <VL53L0X_Init+0x240>)
 8000cb8:	701a      	strb	r2, [r3, #0]

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, 0x91, I2C_MEMADD_SIZE_8BIT, stop_variable, 1, 100);
 8000cba:	2364      	movs	r3, #100	; 0x64
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <VL53L0X_Init+0x244>)
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2291      	movs	r2, #145	; 0x91
 8000cca:	2152      	movs	r1, #82	; 0x52
 8000ccc:	485d      	ldr	r0, [pc, #372]	; (8000e44 <VL53L0X_Init+0x23c>)
 8000cce:	f001 f9d3 	bl	8002078 <HAL_I2C_Mem_Read>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <VL53L0X_Init+0x240>)
 8000cd8:	701a      	strb	r2, [r3, #0]

    i2cStats = VL53L0X_Write_Value(0x00, 0x01);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd5b 	bl	8000798 <VL53L0X_Write_Value>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b58      	ldr	r3, [pc, #352]	; (8000e48 <VL53L0X_Init+0x240>)
 8000ce8:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8000cea:	2100      	movs	r1, #0
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	f7ff fd53 	bl	8000798 <VL53L0X_Write_Value>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <VL53L0X_Init+0x240>)
 8000cf8:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x00);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2080      	movs	r0, #128	; 0x80
 8000cfe:	f7ff fd4b 	bl	8000798 <VL53L0X_Write_Value>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <VL53L0X_Init+0x240>)
 8000d08:	701a      	strb	r2, [r3, #0]

    // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks (don't know what this does)
    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, MSRC_CONFIG_CONTROL, I2C_MEMADD_SIZE_8BIT, initData, 1, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2260      	movs	r2, #96	; 0x60
 8000d1c:	2152      	movs	r1, #82	; 0x52
 8000d1e:	4849      	ldr	r0, [pc, #292]	; (8000e44 <VL53L0X_Init+0x23c>)
 8000d20:	f001 f9aa 	bl	8002078 <HAL_I2C_Mem_Read>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <VL53L0X_Init+0x240>)
 8000d2a:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(MSRC_CONFIG_CONTROL, initData[0] | 0x12);
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	f043 0312 	orr.w	r3, r3, #18
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4619      	mov	r1, r3
 8000d36:	2060      	movs	r0, #96	; 0x60
 8000d38:	f7ff fd2e 	bl	8000798 <VL53L0X_Write_Value>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <VL53L0X_Init+0x240>)
 8000d42:	701a      	strb	r2, [r3, #0]

    // set final range signal rate limit to 0.25 MCPS (million counts per second)
    setSignalRateLimit(0.25); //! Do not know if this function is needed, default may be fine
 8000d44:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000d48:	f7ff fe44 	bl	80009d4 <setSignalRateLimit>

    i2cStats = VL53L0X_Write_Value(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000d4c:	21ff      	movs	r1, #255	; 0xff
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fd22 	bl	8000798 <VL53L0X_Write_Value>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <VL53L0X_Init+0x240>)
 8000d5a:	701a      	strb	r2, [r3, #0]

    //* VL53L0X_DataInit() end

    //* VL53L0X_StaticInit() begin

    if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) // I do not know what this does
 8000d5c:	1cba      	adds	r2, r7, #2
 8000d5e:	1cfb      	adds	r3, r7, #3
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe58 	bl	8000a18 <getSpadInfo>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <VL53L0X_Init+0x16a>
    {
        return 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e37c      	b.n	800146c <VL53L0X_Init+0x864>
    }

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, I2C_MEMADD_SIZE_8BIT, ref_spad_map, 6, 100);
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2306      	movs	r3, #6
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	22b0      	movs	r2, #176	; 0xb0
 8000d82:	2152      	movs	r1, #82	; 0x52
 8000d84:	482f      	ldr	r0, [pc, #188]	; (8000e44 <VL53L0X_Init+0x23c>)
 8000d86:	f001 f977 	bl	8002078 <HAL_I2C_Mem_Read>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <VL53L0X_Init+0x240>)
 8000d90:	701a      	strb	r2, [r3, #0]

    //* VL53L0X_set_reference_spads() begin

    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000d92:	2101      	movs	r1, #1
 8000d94:	20ff      	movs	r0, #255	; 0xff
 8000d96:	f7ff fcff 	bl	8000798 <VL53L0X_Write_Value>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <VL53L0X_Init+0x240>)
 8000da0:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000da2:	2100      	movs	r1, #0
 8000da4:	204f      	movs	r0, #79	; 0x4f
 8000da6:	f7ff fcf7 	bl	8000798 <VL53L0X_Write_Value>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <VL53L0X_Init+0x240>)
 8000db0:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000db2:	212c      	movs	r1, #44	; 0x2c
 8000db4:	204e      	movs	r0, #78	; 0x4e
 8000db6:	f7ff fcef 	bl	8000798 <VL53L0X_Write_Value>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <VL53L0X_Init+0x240>)
 8000dc0:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	20ff      	movs	r0, #255	; 0xff
 8000dc6:	f7ff fce7 	bl	8000798 <VL53L0X_Write_Value>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <VL53L0X_Init+0x240>)
 8000dd0:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000dd2:	21b4      	movs	r1, #180	; 0xb4
 8000dd4:	20b6      	movs	r0, #182	; 0xb6
 8000dd6:	f7ff fcdf 	bl	8000798 <VL53L0X_Write_Value>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <VL53L0X_Init+0x240>)
 8000de0:	701a      	strb	r2, [r3, #0]

    first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000de2:	78bb      	ldrb	r3, [r7, #2]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <VL53L0X_Init+0x1e4>
 8000de8:	230c      	movs	r3, #12
 8000dea:	e000      	b.n	8000dee <VL53L0X_Init+0x1e6>
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
    spads_enabled = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < 48; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	e042      	b.n	8000e80 <VL53L0X_Init+0x278>
    {
        if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000dfa:	7bba      	ldrb	r2, [r7, #14]
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d303      	bcc.n	8000e0a <VL53L0X_Init+0x202>
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d122      	bne.n	8000e50 <VL53L0X_Init+0x248>
        {
            ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	b2d8      	uxtb	r0, r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	f107 0210 	add.w	r2, r7, #16
 8000e16:	4413      	add	r3, r2
 8000e18:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	2101      	movs	r1, #1
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	b25a      	sxtb	r2, r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	f107 0110 	add.w	r1, r7, #16
 8000e3c:	440b      	add	r3, r1
 8000e3e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000e42:	e01a      	b.n	8000e7a <VL53L0X_Init+0x272>
 8000e44:	20000028 	.word	0x20000028
 8000e48:	2000007d 	.word	0x2000007d
 8000e4c:	2000007c 	.word	0x2000007c
        }
        else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f107 0210 	add.w	r2, r7, #16
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000e60:	461a      	mov	r2, r3
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	fa42 f303 	asr.w	r3, r2, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <VL53L0X_Init+0x272>
        {
            spads_enabled++;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	3301      	adds	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 48; i++)
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	73bb      	strb	r3, [r7, #14]
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	2b2f      	cmp	r3, #47	; 0x2f
 8000e84:	d9b9      	bls.n	8000dfa <VL53L0X_Init+0x1f2>
        }
    }

    i2cStats = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_DEV_ADD << 1, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, I2C_MEMADD_SIZE_8BIT, ref_spad_map, 6, 100);
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	22b0      	movs	r2, #176	; 0xb0
 8000e96:	2152      	movs	r1, #82	; 0x52
 8000e98:	48e1      	ldr	r0, [pc, #900]	; (8001220 <VL53L0X_Init+0x618>)
 8000e9a:	f000 fff3 	bl	8001e84 <HAL_I2C_Mem_Write>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4be0      	ldr	r3, [pc, #896]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
    //* VL53L0X_set_reference_spads() end

    //* VL53L0X_load_tuning_settings() begin
    // settings from vl53l0x_tuning.h

    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	20ff      	movs	r0, #255	; 0xff
 8000eaa:	f7ff fc75 	bl	8000798 <VL53L0X_Write_Value>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4bdc      	ldr	r3, [pc, #880]	; (8001224 <VL53L0X_Init+0x61c>)
 8000eb4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x00, 0x00);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fc6d 	bl	8000798 <VL53L0X_Write_Value>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4bd8      	ldr	r3, [pc, #864]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ec4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	f7ff fc65 	bl	8000798 <VL53L0X_Write_Value>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4bd4      	ldr	r3, [pc, #848]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ed4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x09, 0x00);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2009      	movs	r0, #9
 8000eda:	f7ff fc5d 	bl	8000798 <VL53L0X_Write_Value>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4bd0      	ldr	r3, [pc, #832]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ee4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x10, 0x00);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f7ff fc55 	bl	8000798 <VL53L0X_Write_Value>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4bcc      	ldr	r3, [pc, #816]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ef4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x11, 0x00);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2011      	movs	r0, #17
 8000efa:	f7ff fc4d 	bl	8000798 <VL53L0X_Write_Value>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4bc8      	ldr	r3, [pc, #800]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f04:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x24, 0x01);
 8000f06:	2101      	movs	r1, #1
 8000f08:	2024      	movs	r0, #36	; 0x24
 8000f0a:	f7ff fc45 	bl	8000798 <VL53L0X_Write_Value>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4bc4      	ldr	r3, [pc, #784]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f14:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x25, 0xFF);
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	2025      	movs	r0, #37	; 0x25
 8000f1a:	f7ff fc3d 	bl	8000798 <VL53L0X_Write_Value>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4bc0      	ldr	r3, [pc, #768]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f24:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x75, 0x00);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2075      	movs	r0, #117	; 0x75
 8000f2a:	f7ff fc35 	bl	8000798 <VL53L0X_Write_Value>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4bbc      	ldr	r3, [pc, #752]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f34:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8000f36:	2101      	movs	r1, #1
 8000f38:	20ff      	movs	r0, #255	; 0xff
 8000f3a:	f7ff fc2d 	bl	8000798 <VL53L0X_Write_Value>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4bb8      	ldr	r3, [pc, #736]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f44:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x4E, 0x2C);
 8000f46:	212c      	movs	r1, #44	; 0x2c
 8000f48:	204e      	movs	r0, #78	; 0x4e
 8000f4a:	f7ff fc25 	bl	8000798 <VL53L0X_Write_Value>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4bb4      	ldr	r3, [pc, #720]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f54:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x48, 0x00);
 8000f56:	2100      	movs	r1, #0
 8000f58:	2048      	movs	r0, #72	; 0x48
 8000f5a:	f7ff fc1d 	bl	8000798 <VL53L0X_Write_Value>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4bb0      	ldr	r3, [pc, #704]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f64:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x30, 0x20);
 8000f66:	2120      	movs	r1, #32
 8000f68:	2030      	movs	r0, #48	; 0x30
 8000f6a:	f7ff fc15 	bl	8000798 <VL53L0X_Write_Value>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4bac      	ldr	r3, [pc, #688]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f74:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8000f76:	2100      	movs	r1, #0
 8000f78:	20ff      	movs	r0, #255	; 0xff
 8000f7a:	f7ff fc0d 	bl	8000798 <VL53L0X_Write_Value>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4ba8      	ldr	r3, [pc, #672]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f84:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x30, 0x09);
 8000f86:	2109      	movs	r1, #9
 8000f88:	2030      	movs	r0, #48	; 0x30
 8000f8a:	f7ff fc05 	bl	8000798 <VL53L0X_Write_Value>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4ba4      	ldr	r3, [pc, #656]	; (8001224 <VL53L0X_Init+0x61c>)
 8000f94:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x54, 0x00);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2054      	movs	r0, #84	; 0x54
 8000f9a:	f7ff fbfd 	bl	8000798 <VL53L0X_Write_Value>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <VL53L0X_Init+0x61c>)
 8000fa4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x31, 0x04);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	2031      	movs	r0, #49	; 0x31
 8000faa:	f7ff fbf5 	bl	8000798 <VL53L0X_Write_Value>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b9c      	ldr	r3, [pc, #624]	; (8001224 <VL53L0X_Init+0x61c>)
 8000fb4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x32, 0x03);
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	2032      	movs	r0, #50	; 0x32
 8000fba:	f7ff fbed 	bl	8000798 <VL53L0X_Write_Value>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b98      	ldr	r3, [pc, #608]	; (8001224 <VL53L0X_Init+0x61c>)
 8000fc4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x40, 0x83);
 8000fc6:	2183      	movs	r1, #131	; 0x83
 8000fc8:	2040      	movs	r0, #64	; 0x40
 8000fca:	f7ff fbe5 	bl	8000798 <VL53L0X_Write_Value>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b94      	ldr	r3, [pc, #592]	; (8001224 <VL53L0X_Init+0x61c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x46, 0x25);
 8000fd6:	2125      	movs	r1, #37	; 0x25
 8000fd8:	2046      	movs	r0, #70	; 0x46
 8000fda:	f7ff fbdd 	bl	8000798 <VL53L0X_Write_Value>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b90      	ldr	r3, [pc, #576]	; (8001224 <VL53L0X_Init+0x61c>)
 8000fe4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x60, 0x00);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2060      	movs	r0, #96	; 0x60
 8000fea:	f7ff fbd5 	bl	8000798 <VL53L0X_Write_Value>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <VL53L0X_Init+0x61c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x27, 0x00);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2027      	movs	r0, #39	; 0x27
 8000ffa:	f7ff fbcd 	bl	8000798 <VL53L0X_Write_Value>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b88      	ldr	r3, [pc, #544]	; (8001224 <VL53L0X_Init+0x61c>)
 8001004:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x50, 0x06);
 8001006:	2106      	movs	r1, #6
 8001008:	2050      	movs	r0, #80	; 0x50
 800100a:	f7ff fbc5 	bl	8000798 <VL53L0X_Write_Value>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b84      	ldr	r3, [pc, #528]	; (8001224 <VL53L0X_Init+0x61c>)
 8001014:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x51, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	2051      	movs	r0, #81	; 0x51
 800101a:	f7ff fbbd 	bl	8000798 <VL53L0X_Write_Value>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b80      	ldr	r3, [pc, #512]	; (8001224 <VL53L0X_Init+0x61c>)
 8001024:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x52, 0x96);
 8001026:	2196      	movs	r1, #150	; 0x96
 8001028:	2052      	movs	r0, #82	; 0x52
 800102a:	f7ff fbb5 	bl	8000798 <VL53L0X_Write_Value>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <VL53L0X_Init+0x61c>)
 8001034:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x56, 0x08);
 8001036:	2108      	movs	r1, #8
 8001038:	2056      	movs	r0, #86	; 0x56
 800103a:	f7ff fbad 	bl	8000798 <VL53L0X_Write_Value>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b78      	ldr	r3, [pc, #480]	; (8001224 <VL53L0X_Init+0x61c>)
 8001044:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x57, 0x30);
 8001046:	2130      	movs	r1, #48	; 0x30
 8001048:	2057      	movs	r0, #87	; 0x57
 800104a:	f7ff fba5 	bl	8000798 <VL53L0X_Write_Value>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <VL53L0X_Init+0x61c>)
 8001054:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x61, 0x00);
 8001056:	2100      	movs	r1, #0
 8001058:	2061      	movs	r0, #97	; 0x61
 800105a:	f7ff fb9d 	bl	8000798 <VL53L0X_Write_Value>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b70      	ldr	r3, [pc, #448]	; (8001224 <VL53L0X_Init+0x61c>)
 8001064:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x62, 0x00);
 8001066:	2100      	movs	r1, #0
 8001068:	2062      	movs	r0, #98	; 0x62
 800106a:	f7ff fb95 	bl	8000798 <VL53L0X_Write_Value>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <VL53L0X_Init+0x61c>)
 8001074:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x64, 0x00);
 8001076:	2100      	movs	r1, #0
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f7ff fb8d 	bl	8000798 <VL53L0X_Write_Value>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <VL53L0X_Init+0x61c>)
 8001084:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x65, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	2065      	movs	r0, #101	; 0x65
 800108a:	f7ff fb85 	bl	8000798 <VL53L0X_Write_Value>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <VL53L0X_Init+0x61c>)
 8001094:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x66, 0xA0);
 8001096:	21a0      	movs	r1, #160	; 0xa0
 8001098:	2066      	movs	r0, #102	; 0x66
 800109a:	f7ff fb7d 	bl	8000798 <VL53L0X_Write_Value>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b60      	ldr	r3, [pc, #384]	; (8001224 <VL53L0X_Init+0x61c>)
 80010a4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 80010a6:	2101      	movs	r1, #1
 80010a8:	20ff      	movs	r0, #255	; 0xff
 80010aa:	f7ff fb75 	bl	8000798 <VL53L0X_Write_Value>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <VL53L0X_Init+0x61c>)
 80010b4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x22, 0x32);
 80010b6:	2132      	movs	r1, #50	; 0x32
 80010b8:	2022      	movs	r0, #34	; 0x22
 80010ba:	f7ff fb6d 	bl	8000798 <VL53L0X_Write_Value>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b58      	ldr	r3, [pc, #352]	; (8001224 <VL53L0X_Init+0x61c>)
 80010c4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x47, 0x14);
 80010c6:	2114      	movs	r1, #20
 80010c8:	2047      	movs	r0, #71	; 0x47
 80010ca:	f7ff fb65 	bl	8000798 <VL53L0X_Write_Value>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <VL53L0X_Init+0x61c>)
 80010d4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x49, 0xFF);
 80010d6:	21ff      	movs	r1, #255	; 0xff
 80010d8:	2049      	movs	r0, #73	; 0x49
 80010da:	f7ff fb5d 	bl	8000798 <VL53L0X_Write_Value>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b50      	ldr	r3, [pc, #320]	; (8001224 <VL53L0X_Init+0x61c>)
 80010e4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x4A, 0x00);
 80010e6:	2100      	movs	r1, #0
 80010e8:	204a      	movs	r0, #74	; 0x4a
 80010ea:	f7ff fb55 	bl	8000798 <VL53L0X_Write_Value>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <VL53L0X_Init+0x61c>)
 80010f4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 80010f6:	2100      	movs	r1, #0
 80010f8:	20ff      	movs	r0, #255	; 0xff
 80010fa:	f7ff fb4d 	bl	8000798 <VL53L0X_Write_Value>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <VL53L0X_Init+0x61c>)
 8001104:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x7A, 0x0A);
 8001106:	210a      	movs	r1, #10
 8001108:	207a      	movs	r0, #122	; 0x7a
 800110a:	f7ff fb45 	bl	8000798 <VL53L0X_Write_Value>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <VL53L0X_Init+0x61c>)
 8001114:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x7B, 0x00);
 8001116:	2100      	movs	r1, #0
 8001118:	207b      	movs	r0, #123	; 0x7b
 800111a:	f7ff fb3d 	bl	8000798 <VL53L0X_Write_Value>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <VL53L0X_Init+0x61c>)
 8001124:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x78, 0x21);
 8001126:	2121      	movs	r1, #33	; 0x21
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f7ff fb35 	bl	8000798 <VL53L0X_Write_Value>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <VL53L0X_Init+0x61c>)
 8001134:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8001136:	2101      	movs	r1, #1
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	f7ff fb2d 	bl	8000798 <VL53L0X_Write_Value>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <VL53L0X_Init+0x61c>)
 8001144:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x23, 0x34);
 8001146:	2134      	movs	r1, #52	; 0x34
 8001148:	2023      	movs	r0, #35	; 0x23
 800114a:	f7ff fb25 	bl	8000798 <VL53L0X_Write_Value>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <VL53L0X_Init+0x61c>)
 8001154:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x42, 0x00);
 8001156:	2100      	movs	r1, #0
 8001158:	2042      	movs	r0, #66	; 0x42
 800115a:	f7ff fb1d 	bl	8000798 <VL53L0X_Write_Value>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <VL53L0X_Init+0x61c>)
 8001164:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x44, 0xFF);
 8001166:	21ff      	movs	r1, #255	; 0xff
 8001168:	2044      	movs	r0, #68	; 0x44
 800116a:	f7ff fb15 	bl	8000798 <VL53L0X_Write_Value>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <VL53L0X_Init+0x61c>)
 8001174:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x45, 0x26);
 8001176:	2126      	movs	r1, #38	; 0x26
 8001178:	2045      	movs	r0, #69	; 0x45
 800117a:	f7ff fb0d 	bl	8000798 <VL53L0X_Write_Value>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <VL53L0X_Init+0x61c>)
 8001184:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x46, 0x05);
 8001186:	2105      	movs	r1, #5
 8001188:	2046      	movs	r0, #70	; 0x46
 800118a:	f7ff fb05 	bl	8000798 <VL53L0X_Write_Value>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <VL53L0X_Init+0x61c>)
 8001194:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x40, 0x40);
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	2040      	movs	r0, #64	; 0x40
 800119a:	f7ff fafd 	bl	8000798 <VL53L0X_Write_Value>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <VL53L0X_Init+0x61c>)
 80011a4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x0E, 0x06);
 80011a6:	2106      	movs	r1, #6
 80011a8:	200e      	movs	r0, #14
 80011aa:	f7ff faf5 	bl	8000798 <VL53L0X_Write_Value>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <VL53L0X_Init+0x61c>)
 80011b4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x20, 0x1A);
 80011b6:	211a      	movs	r1, #26
 80011b8:	2020      	movs	r0, #32
 80011ba:	f7ff faed 	bl	8000798 <VL53L0X_Write_Value>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <VL53L0X_Init+0x61c>)
 80011c4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x43, 0x40);
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	2043      	movs	r0, #67	; 0x43
 80011ca:	f7ff fae5 	bl	8000798 <VL53L0X_Write_Value>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <VL53L0X_Init+0x61c>)
 80011d4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 80011d6:	2100      	movs	r1, #0
 80011d8:	20ff      	movs	r0, #255	; 0xff
 80011da:	f7ff fadd 	bl	8000798 <VL53L0X_Write_Value>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <VL53L0X_Init+0x61c>)
 80011e4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x34, 0x03);
 80011e6:	2103      	movs	r1, #3
 80011e8:	2034      	movs	r0, #52	; 0x34
 80011ea:	f7ff fad5 	bl	8000798 <VL53L0X_Write_Value>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <VL53L0X_Init+0x61c>)
 80011f4:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x35, 0x44);
 80011f6:	2144      	movs	r1, #68	; 0x44
 80011f8:	2035      	movs	r0, #53	; 0x35
 80011fa:	f7ff facd 	bl	8000798 <VL53L0X_Write_Value>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <VL53L0X_Init+0x61c>)
 8001204:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8001206:	2101      	movs	r1, #1
 8001208:	20ff      	movs	r0, #255	; 0xff
 800120a:	f7ff fac5 	bl	8000798 <VL53L0X_Write_Value>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <VL53L0X_Init+0x61c>)
 8001214:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x31, 0x04);
 8001216:	2104      	movs	r1, #4
 8001218:	2031      	movs	r0, #49	; 0x31
 800121a:	f7ff fabd 	bl	8000798 <VL53L0X_Write_Value>
 800121e:	e003      	b.n	8001228 <VL53L0X_Init+0x620>
 8001220:	20000028 	.word	0x20000028
 8001224:	2000007d 	.word	0x2000007d
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b91      	ldr	r3, [pc, #580]	; (8001474 <VL53L0X_Init+0x86c>)
 800122e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x4B, 0x09);
 8001230:	2109      	movs	r1, #9
 8001232:	204b      	movs	r0, #75	; 0x4b
 8001234:	f7ff fab0 	bl	8000798 <VL53L0X_Write_Value>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <VL53L0X_Init+0x86c>)
 800123e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x4C, 0x05);
 8001240:	2105      	movs	r1, #5
 8001242:	204c      	movs	r0, #76	; 0x4c
 8001244:	f7ff faa8 	bl	8000798 <VL53L0X_Write_Value>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b89      	ldr	r3, [pc, #548]	; (8001474 <VL53L0X_Init+0x86c>)
 800124e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x4D, 0x04);
 8001250:	2104      	movs	r1, #4
 8001252:	204d      	movs	r0, #77	; 0x4d
 8001254:	f7ff faa0 	bl	8000798 <VL53L0X_Write_Value>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b85      	ldr	r3, [pc, #532]	; (8001474 <VL53L0X_Init+0x86c>)
 800125e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8001260:	2100      	movs	r1, #0
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fa98 	bl	8000798 <VL53L0X_Write_Value>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b81      	ldr	r3, [pc, #516]	; (8001474 <VL53L0X_Init+0x86c>)
 800126e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x44, 0x00);
 8001270:	2100      	movs	r1, #0
 8001272:	2044      	movs	r0, #68	; 0x44
 8001274:	f7ff fa90 	bl	8000798 <VL53L0X_Write_Value>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <VL53L0X_Init+0x86c>)
 800127e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x45, 0x20);
 8001280:	2120      	movs	r1, #32
 8001282:	2045      	movs	r0, #69	; 0x45
 8001284:	f7ff fa88 	bl	8000798 <VL53L0X_Write_Value>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b79      	ldr	r3, [pc, #484]	; (8001474 <VL53L0X_Init+0x86c>)
 800128e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x47, 0x08);
 8001290:	2108      	movs	r1, #8
 8001292:	2047      	movs	r0, #71	; 0x47
 8001294:	f7ff fa80 	bl	8000798 <VL53L0X_Write_Value>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <VL53L0X_Init+0x86c>)
 800129e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x48, 0x28);
 80012a0:	2128      	movs	r1, #40	; 0x28
 80012a2:	2048      	movs	r0, #72	; 0x48
 80012a4:	f7ff fa78 	bl	8000798 <VL53L0X_Write_Value>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <VL53L0X_Init+0x86c>)
 80012ae:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x67, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2067      	movs	r0, #103	; 0x67
 80012b4:	f7ff fa70 	bl	8000798 <VL53L0X_Write_Value>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <VL53L0X_Init+0x86c>)
 80012be:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x70, 0x04);
 80012c0:	2104      	movs	r1, #4
 80012c2:	2070      	movs	r0, #112	; 0x70
 80012c4:	f7ff fa68 	bl	8000798 <VL53L0X_Write_Value>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <VL53L0X_Init+0x86c>)
 80012ce:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x71, 0x01);
 80012d0:	2101      	movs	r1, #1
 80012d2:	2071      	movs	r0, #113	; 0x71
 80012d4:	f7ff fa60 	bl	8000798 <VL53L0X_Write_Value>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b65      	ldr	r3, [pc, #404]	; (8001474 <VL53L0X_Init+0x86c>)
 80012de:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x72, 0xFE);
 80012e0:	21fe      	movs	r1, #254	; 0xfe
 80012e2:	2072      	movs	r0, #114	; 0x72
 80012e4:	f7ff fa58 	bl	8000798 <VL53L0X_Write_Value>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b61      	ldr	r3, [pc, #388]	; (8001474 <VL53L0X_Init+0x86c>)
 80012ee:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x76, 0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2076      	movs	r0, #118	; 0x76
 80012f4:	f7ff fa50 	bl	8000798 <VL53L0X_Write_Value>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <VL53L0X_Init+0x86c>)
 80012fe:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x77, 0x00);
 8001300:	2100      	movs	r1, #0
 8001302:	2077      	movs	r0, #119	; 0x77
 8001304:	f7ff fa48 	bl	8000798 <VL53L0X_Write_Value>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b59      	ldr	r3, [pc, #356]	; (8001474 <VL53L0X_Init+0x86c>)
 800130e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8001310:	2101      	movs	r1, #1
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f7ff fa40 	bl	8000798 <VL53L0X_Write_Value>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b55      	ldr	r3, [pc, #340]	; (8001474 <VL53L0X_Init+0x86c>)
 800131e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x0D, 0x01);
 8001320:	2101      	movs	r1, #1
 8001322:	200d      	movs	r0, #13
 8001324:	f7ff fa38 	bl	8000798 <VL53L0X_Write_Value>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <VL53L0X_Init+0x86c>)
 800132e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8001330:	2100      	movs	r1, #0
 8001332:	20ff      	movs	r0, #255	; 0xff
 8001334:	f7ff fa30 	bl	8000798 <VL53L0X_Write_Value>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <VL53L0X_Init+0x86c>)
 800133e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x01);
 8001340:	2101      	movs	r1, #1
 8001342:	2080      	movs	r0, #128	; 0x80
 8001344:	f7ff fa28 	bl	8000798 <VL53L0X_Write_Value>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <VL53L0X_Init+0x86c>)
 800134e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x01, 0xF8);
 8001350:	21f8      	movs	r1, #248	; 0xf8
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fa20 	bl	8000798 <VL53L0X_Write_Value>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <VL53L0X_Init+0x86c>)
 800135e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x01);
 8001360:	2101      	movs	r1, #1
 8001362:	20ff      	movs	r0, #255	; 0xff
 8001364:	f7ff fa18 	bl	8000798 <VL53L0X_Write_Value>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b41      	ldr	r3, [pc, #260]	; (8001474 <VL53L0X_Init+0x86c>)
 800136e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x8E, 0x01);
 8001370:	2101      	movs	r1, #1
 8001372:	208e      	movs	r0, #142	; 0x8e
 8001374:	f7ff fa10 	bl	8000798 <VL53L0X_Write_Value>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <VL53L0X_Init+0x86c>)
 800137e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x00, 0x01);
 8001380:	2101      	movs	r1, #1
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fa08 	bl	8000798 <VL53L0X_Write_Value>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <VL53L0X_Init+0x86c>)
 800138e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0xFF, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	20ff      	movs	r0, #255	; 0xff
 8001394:	f7ff fa00 	bl	8000798 <VL53L0X_Write_Value>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <VL53L0X_Init+0x86c>)
 800139e:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(0x80, 0x00);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2080      	movs	r0, #128	; 0x80
 80013a4:	f7ff f9f8 	bl	8000798 <VL53L0X_Write_Value>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <VL53L0X_Init+0x86c>)
 80013ae:	701a      	strb	r2, [r3, #0]
    //* VL53L0X_load_tuning_settings() end

    // "Set interrupt config to new sample ready"
    //* VL53L0X_SetGpioConfig() begin

    i2cStats = VL53L0X_Write_Value(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80013b0:	2104      	movs	r1, #4
 80013b2:	200a      	movs	r0, #10
 80013b4:	f7ff f9f0 	bl	8000798 <VL53L0X_Write_Value>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <VL53L0X_Init+0x86c>)
 80013be:	701a      	strb	r2, [r3, #0]

    i2cStats = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_DEV_ADD << 1, GPIO_HV_MUX_ACTIVE_HIGH, I2C_MEMADD_SIZE_8BIT, initData, 1, 100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2284      	movs	r2, #132	; 0x84
 80013d2:	2152      	movs	r1, #82	; 0x52
 80013d4:	4828      	ldr	r0, [pc, #160]	; (8001478 <VL53L0X_Init+0x870>)
 80013d6:	f000 fe4f 	bl	8002078 <HAL_I2C_Mem_Read>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <VL53L0X_Init+0x86c>)
 80013e0:	701a      	strb	r2, [r3, #0]
    i2cStats = VL53L0X_Write_Value(GPIO_HV_MUX_ACTIVE_HIGH, initData[0] & ~0x10); // active low
 80013e2:	7b3b      	ldrb	r3, [r7, #12]
 80013e4:	f023 0310 	bic.w	r3, r3, #16
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	2084      	movs	r0, #132	; 0x84
 80013ee:	f7ff f9d3 	bl	8000798 <VL53L0X_Write_Value>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <VL53L0X_Init+0x86c>)
 80013f8:	701a      	strb	r2, [r3, #0]

    i2cStats = VL53L0X_Write_Value(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013fa:	2101      	movs	r1, #1
 80013fc:	200b      	movs	r0, #11
 80013fe:	f7ff f9cb 	bl	8000798 <VL53L0X_Write_Value>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <VL53L0X_Init+0x86c>)
 8001408:	701a      	strb	r2, [r3, #0]
    // measurement_timing_budget_us = getMeasurementTimingBudget(); //! Not sure if this is needed. Need to test if the default provides accurate measurements

    // "Disable MSRC and TCC by default"
    //* VL53L0X_SetSequenceStepEnable() begin

    i2cStats = VL53L0X_Write_Value(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800140a:	21e8      	movs	r1, #232	; 0xe8
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff f9c3 	bl	8000798 <VL53L0X_Write_Value>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <VL53L0X_Init+0x86c>)
 8001418:	701a      	strb	r2, [r3, #0]

    //* VL53L0X_PerformRefCalibration() begin

    //* VL53L0X_perform_vhv_calibration() begin

    i2cStats = VL53L0X_Write_Value(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800141a:	2101      	movs	r1, #1
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff f9bb 	bl	8000798 <VL53L0X_Write_Value>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <VL53L0X_Init+0x86c>)
 8001428:	701a      	strb	r2, [r3, #0]

    if (!performSingleRefCalibration(0x40))
 800142a:	2040      	movs	r0, #64	; 0x40
 800142c:	f7ff f9d4 	bl	80007d8 <performSingleRefCalibration>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <VL53L0X_Init+0x832>
    {
        return 0;
 8001436:	2300      	movs	r3, #0
 8001438:	e018      	b.n	800146c <VL53L0X_Init+0x864>

    //* VL53L0X_perform_vhv_calibration() end

    //* VL53L0X_perform_phase_calibration() begin

    i2cStats = VL53L0X_Write_Value(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800143a:	2102      	movs	r1, #2
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff f9ab 	bl	8000798 <VL53L0X_Write_Value>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <VL53L0X_Init+0x86c>)
 8001448:	701a      	strb	r2, [r3, #0]

    if (!performSingleRefCalibration(0x00))
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff f9c4 	bl	80007d8 <performSingleRefCalibration>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <VL53L0X_Init+0x852>
    {
        return 0;
 8001456:	2300      	movs	r3, #0
 8001458:	e008      	b.n	800146c <VL53L0X_Init+0x864>
    }

    //* VL53L0X_perform_phase_calibration() end

    // "restore the previous Sequence Config"
    i2cStats = VL53L0X_Write_Value(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800145a:	21e8      	movs	r1, #232	; 0xe8
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff f99b 	bl	8000798 <VL53L0X_Write_Value>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <VL53L0X_Init+0x86c>)
 8001468:	701a      	strb	r2, [r3, #0]

    //* VL53L0X_PerformRefCalibration() end

    return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000007d 	.word	0x2000007d
 8001478:	20000028 	.word	0x20000028

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f894 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <SystemInit+0x28>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <SystemInit+0x28>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SystemInit+0x28>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
#endif
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800156a:	e003      	b.n	8001574 <LoopCopyDataInit>

0800156c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800156e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001572:	3104      	adds	r1, #4

08001574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800157a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800157c:	d3f6      	bcc.n	800156c <CopyDataInit>
  ldr  r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001580:	e002      	b.n	8001588 <LoopFillZerobss>

08001582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001584:	f842 3b04 	str.w	r3, [r2], #4

08001588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800158a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800158c:	d3f9      	bcc.n	8001582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800158e:	f7ff ffd3 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f001 ff25 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff f85d 	bl	8000654 <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015a0:	08003478 	.word	0x08003478
  ldr  r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80015ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80015b0:	20000084 	.word	0x20000084

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f92f 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff ff4e 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f939 	bl	8001892 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 f90f 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000080 	.word	0x20000080

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000080 	.word	0x20000080

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_Delay+0x40>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5c 	bl	8001728 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e16b      	b.n	8001ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 815a 	bne.w	8001b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d00b      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0xfc>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b12      	cmp	r3, #18
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80b4 	beq.w	8001b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x328>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00e      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00c      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b16:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f ae90 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3724      	adds	r7, #36	; 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40021400 	.word	0x40021400
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e11f      	b.n	8001e66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fcc2 	bl	80005c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c78:	f001 fb9e 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d807      	bhi.n	8001c98 <HAL_I2C_Init+0x84>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_I2C_Init+0x260>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e006      	b.n	8001ca6 <HAL_I2C_Init+0x92>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <HAL_I2C_Init+0x264>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0db      	b.n	8001e66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_I2C_Init+0x268>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a64      	ldr	r2, [pc, #400]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_I2C_Init+0xd4>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	e009      	b.n	8001cfc <HAL_I2C_Init+0xe8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_I2C_Init+0x26c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4956      	ldr	r1, [pc, #344]	; (8001e70 <HAL_I2C_Init+0x25c>)
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	d80d      	bhi.n	8001d38 <HAL_I2C_Init+0x124>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e59      	subs	r1, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	bf38      	it	cc
 8001d34:	2304      	movcc	r3, #4
 8001d36:	e04f      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_I2C_Init+0x150>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e012      	b.n	8001d8a <HAL_I2C_Init+0x176>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x17e>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e022      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10e      	bne.n	8001db8 <HAL_I2C_Init+0x1a4>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e58      	subs	r0, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	440b      	add	r3, r1
 8001da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db6:	e00f      	b.n	8001dd8 <HAL_I2C_Init+0x1c4>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6911      	ldr	r1, [r2, #16]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68d2      	ldr	r2, [r2, #12]
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	000186a0 	.word	0x000186a0
 8001e74:	001e847f 	.word	0x001e847f
 8001e78:	003d08ff 	.word	0x003d08ff
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9e:	f7ff fbf1 	bl	8001684 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	f040 80d9 	bne.w	8002064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2319      	movs	r3, #25
 8001eb8:	2201      	movs	r2, #1
 8001eba:	496d      	ldr	r1, [pc, #436]	; (8002070 <HAL_I2C_Mem_Write+0x1ec>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fc89 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0cc      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Mem_Write+0x56>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0c5      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2221      	movs	r2, #33	; 0x21
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_I2C_Mem_Write+0x1f0>)
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f42:	88f8      	ldrh	r0, [r7, #6]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	8979      	ldrh	r1, [r7, #10]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fac4 	bl	80024e0 <I2C_RequestMemoryWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d052      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e081      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fd0a 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d107      	bne.n	8001f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11b      	bne.n	8002004 <HAL_I2C_Mem_Write+0x180>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d017      	beq.n	8002004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1aa      	bne.n	8001f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fcf6 	bl	8002a02 <I2C_WaitOnBTFFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e016      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	00100002 	.word	0x00100002
 8002074:	ffff0000 	.word	0xffff0000

08002078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002092:	f7ff faf7 	bl	8001684 <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	f040 8208 	bne.w	80024b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	2201      	movs	r2, #1
 80020ae:	497b      	ldr	r1, [pc, #492]	; (800229c <HAL_I2C_Mem_Read+0x224>)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fb8f 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	e1fb      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Mem_Read+0x56>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e1f4      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d007      	beq.n	80020f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2222      	movs	r2, #34	; 0x22
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_I2C_Mem_Read+0x228>)
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002136:	88f8      	ldrh	r0, [r7, #6]
 8002138:	893a      	ldrh	r2, [r7, #8]
 800213a:	8979      	ldrh	r1, [r7, #10]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4603      	mov	r3, r0
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fa5e 	bl	8002608 <I2C_RequestMemoryRead>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1b0      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d113      	bne.n	8002186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e184      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	2b01      	cmp	r3, #1
 800218c:	d11b      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e164      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	e144      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800221c:	e138      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b03      	cmp	r3, #3
 8002224:	f200 80f1 	bhi.w	800240a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b01      	cmp	r3, #1
 800222e:	d123      	bne.n	8002278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fc25 	bl	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e139      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002276:	e10b      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	2b02      	cmp	r3, #2
 800227e:	d14e      	bne.n	800231e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	2200      	movs	r2, #0
 8002288:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_I2C_Mem_Read+0x22c>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 faa2 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e10e      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
 800229a:	bf00      	nop
 800229c:	00100002 	.word	0x00100002
 80022a0:	ffff0000 	.word	0xffff0000
 80022a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231c:	e0b8      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2200      	movs	r2, #0
 8002326:	4966      	ldr	r1, [pc, #408]	; (80024c0 <HAL_I2C_Mem_Read+0x448>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fa53 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0bf      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2200      	movs	r2, #0
 8002382:	494f      	ldr	r1, [pc, #316]	; (80024c0 <HAL_I2C_Mem_Read+0x448>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fa25 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e091      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002408:	e042      	b.n	8002490 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb38 	bl	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04c      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d118      	bne.n	8002490 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	f47f aec2 	bne.w	800221e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	00010004 	.word	0x00010004

080024c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	817b      	strh	r3, [r7, #10]
 80024f2:	460b      	mov	r3, r1
 80024f4:	813b      	strh	r3, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2200      	movs	r2, #0
 8002512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f95c 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e05f      	b.n	80025fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800253c:	897b      	ldrh	r3, [r7, #10]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800254a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	492c      	ldr	r1, [pc, #176]	; (8002604 <I2C_RequestMemoryWrite+0x124>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f995 	bl	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e04c      	b.n	80025fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	6a39      	ldr	r1, [r7, #32]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f9ff 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e02b      	b.n	80025fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	e021      	b.n	80025fa <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025b6:	893b      	ldrh	r3, [r7, #8]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f9d9 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e005      	b.n	80025fc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	00010002 	.word	0x00010002

08002608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2200      	movs	r2, #0
 800264a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8c0 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0a9      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	6a3a      	ldr	r2, [r7, #32]
 8002688:	4951      	ldr	r1, [pc, #324]	; (80027d0 <I2C_RequestMemoryRead+0x1c8>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f8f9 	bl	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e096      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f963 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e075      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e2:	893b      	ldrh	r3, [r7, #8]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	e021      	b.n	8002732 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026ee:	893b      	ldrh	r3, [r7, #8]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	6a39      	ldr	r1, [r7, #32]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f93d 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04f      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002728:	893b      	ldrh	r3, [r7, #8]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f922 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e034      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2200      	movs	r2, #0
 8002776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f82a 	bl	80027d4 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e013      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <I2C_RequestMemoryRead+0x1c8>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f863 	bl	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	00010002 	.word	0x00010002

080027d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027e4:	e025      	b.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d021      	beq.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7fe ff49 	bl	8001684 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e023      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x84>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	e00c      	b.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4013      	ands	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	429a      	cmp	r2, r3
 8002876:	d0b6      	beq.n	80027e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002890:	e051      	b.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	d123      	bne.n	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0204 	orr.w	r2, r3, #4
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e046      	b.n	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d021      	beq.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe fec7 	bl	8001684 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e020      	b.n	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10c      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e00b      	b.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	43da      	mvns	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d18d      	bne.n	8002892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298c:	e02d      	b.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f8ce 	bl	8002b30 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e02d      	b.n	80029fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d021      	beq.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7fe fe6d 	bl	8001684 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e007      	b.n	80029fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d1ca      	bne.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a0e:	e02d      	b.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f88d 	bl	8002b30 <I2C_IsAcknowledgeFailed>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e02d      	b.n	8002a7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d021      	beq.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a28:	f7fe fe2c 	bl	8001684 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d302      	bcc.n	8002a3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d1ca      	bne.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a90:	e042      	b.n	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d119      	bne.n	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0210 	mvn.w	r2, #16
 8002aa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e029      	b.n	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad4:	f7fe fdd6 	bl	8001684 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d116      	bne.n	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e007      	b.n	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d1b5      	bne.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d11b      	bne.n	8002b80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e25b      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d075      	beq.n	8002c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bae:	4ba3      	ldr	r3, [pc, #652]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4ba0      	ldr	r3, [pc, #640]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d112      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc6:	4b9d      	ldr	r3, [pc, #628]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	4b99      	ldr	r3, [pc, #612]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05b      	beq.n	8002c98 <HAL_RCC_OscConfig+0x108>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d157      	bne.n	8002c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e236      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x74>
 8002bf6:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x98>
 8002c0e:	4b8b      	ldr	r3, [pc, #556]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a8a      	ldr	r2, [pc, #552]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b88      	ldr	r3, [pc, #544]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a87      	ldr	r2, [pc, #540]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c28:	4b84      	ldr	r3, [pc, #528]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a83      	ldr	r2, [pc, #524]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b81      	ldr	r3, [pc, #516]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd1c 	bl	8001684 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fd18 	bl	8001684 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1fb      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fd08 	bl	8001684 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fd04 	bl	8001684 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1e7      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0xe8>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca6:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b62      	ldr	r3, [pc, #392]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x152>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1bb      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4952      	ldr	r1, [pc, #328]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCC_OscConfig+0x2b0>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe fcbd 	bl	8001684 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fcb9 	bl	8001684 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e19c      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4940      	ldr	r1, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCC_OscConfig+0x2b0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc9c 	bl	8001684 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fc98 	bl	8001684 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e17b      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d030      	beq.n	8002ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_RCC_OscConfig+0x2b4>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fc7c 	bl	8001684 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fc78 	bl	8001684 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e15b      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x200>
 8002dae:	e015      	b.n	8002ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x2b4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fc65 	bl	8001684 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fc61 	bl	8001684 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e144      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a0 	beq.w	8002f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x2b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d121      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_RCC_OscConfig+0x2b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_RCC_OscConfig+0x2b8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7fe fc27 	bl	8001684 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e011      	b.n	8002e5e <HAL_RCC_OscConfig+0x2ce>
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
 8002e44:	42470e80 	.word	0x42470e80
 8002e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fe fc1a 	bl	8001684 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0fd      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4d4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
 8002e72:	4b7d      	ldr	r3, [pc, #500]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	e01c      	b.n	8002eba <HAL_RCC_OscConfig+0x32a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d10c      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b77      	ldr	r3, [pc, #476]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a76      	ldr	r2, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	4b74      	ldr	r3, [pc, #464]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a73      	ldr	r2, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	e00b      	b.n	8002eba <HAL_RCC_OscConfig+0x32a>
 8002ea2:	4b71      	ldr	r3, [pc, #452]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a70      	ldr	r2, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b6e      	ldr	r3, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a6d      	ldr	r2, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d015      	beq.n	8002eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbdf 	bl	8001684 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe fbdb 	bl	8001684 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0bc      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ee      	beq.n	8002eca <HAL_RCC_OscConfig+0x33a>
 8002eec:	e014      	b.n	8002f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fbc9 	bl	8001684 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fbc5 	bl	8001684 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0a6      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4b52      	ldr	r3, [pc, #328]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8092 	beq.w	8003058 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d05c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d141      	bne.n	8002fcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b48      	ldr	r3, [pc, #288]	; (800306c <HAL_RCC_OscConfig+0x4dc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fb99 	bl	8001684 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fb95 	bl	8001684 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e078      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	019b      	lsls	r3, r3, #6
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	4933      	ldr	r1, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_RCC_OscConfig+0x4dc>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fb6e 	bl	8001684 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fb6a 	bl	8001684 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04d      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x41c>
 8002fca:	e045      	b.n	8003058 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x4dc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fb57 	bl	8001684 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fe fb53 	bl	8001684 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e036      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x44a>
 8002ff8:	e02e      	b.n	8003058 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e029      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_RCC_OscConfig+0x4d8>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	429a      	cmp	r2, r3
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d115      	bne.n	8003054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003034:	4293      	cmp	r3, r2
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000
 8003068:	40023800 	.word	0x40023800
 800306c:	42470060 	.word	0x42470060

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7fe fa90 	bl	8001684 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fe fa8c 	bl	8001684 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4601      	mov	r1, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5cd3      	ldrb	r3, [r2, r3]
 800320a:	fa21 f303 	lsr.w	r3, r1, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f9f0 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08003450 	.word	0x08003450
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	2300      	movs	r3, #0
 800324c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003252:	4b50      	ldr	r3, [pc, #320]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d007      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x32>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d008      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x38>
 8003262:	2b00      	cmp	r3, #0
 8003264:	f040 808d 	bne.w	8003382 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_GetSysClockFreq+0x15c>)
 800326a:	60bb      	str	r3, [r7, #8]
       break;
 800326c:	e08c      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 8003270:	60bb      	str	r3, [r7, #8]
      break;
 8003272:	e089      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003274:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327e:	4b45      	ldr	r3, [pc, #276]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d023      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b42      	ldr	r3, [pc, #264]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	ea03 0501 	and.w	r5, r3, r1
 80032a0:	ea04 0602 	and.w	r6, r4, r2
 80032a4:	4a3d      	ldr	r2, [pc, #244]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 80032a6:	fb02 f106 	mul.w	r1, r2, r6
 80032aa:	2200      	movs	r2, #0
 80032ac:	fb02 f205 	mul.w	r2, r2, r5
 80032b0:	440a      	add	r2, r1
 80032b2:	493a      	ldr	r1, [pc, #232]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 80032b4:	fba5 0101 	umull	r0, r1, r5, r1
 80032b8:	1853      	adds	r3, r2, r1
 80032ba:	4619      	mov	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	f7fc ff7f 	bl	80001c8 <__aeabi_uldivmod>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e049      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	ea03 0501 	and.w	r5, r3, r1
 80032e8:	ea04 0602 	and.w	r6, r4, r2
 80032ec:	4629      	mov	r1, r5
 80032ee:	4632      	mov	r2, r6
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	0154      	lsls	r4, r2, #5
 80032fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032fe:	014b      	lsls	r3, r1, #5
 8003300:	4619      	mov	r1, r3
 8003302:	4622      	mov	r2, r4
 8003304:	1b49      	subs	r1, r1, r5
 8003306:	eb62 0206 	sbc.w	r2, r2, r6
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0194      	lsls	r4, r2, #6
 8003314:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	1a5b      	subs	r3, r3, r1
 800331c:	eb64 0402 	sbc.w	r4, r4, r2
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800332e:	00d9      	lsls	r1, r3, #3
 8003330:	460b      	mov	r3, r1
 8003332:	4614      	mov	r4, r2
 8003334:	195b      	adds	r3, r3, r5
 8003336:	eb44 0406 	adc.w	r4, r4, r6
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	02a2      	lsls	r2, r4, #10
 8003344:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003348:	0299      	lsls	r1, r3, #10
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4618      	mov	r0, r3
 8003350:	4621      	mov	r1, r4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	f7fc ff34 	bl	80001c8 <__aeabi_uldivmod>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0x158>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	3301      	adds	r3, #1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	60bb      	str	r3, [r7, #8]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003384:	60bb      	str	r3, [r7, #8]
      break;
 8003386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003388:	68bb      	ldr	r3, [r7, #8]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	017d7840 	.word	0x017d7840

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4601      	mov	r1, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08003460 	.word	0x08003460

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0d      	ldr	r6, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1ba4      	subs	r4, r4, r6
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2500      	movs	r5, #0
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4e0b      	ldr	r6, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f820 	bl	8003438 <_init>
 80033f8:	1ba4      	subs	r4, r4, r6
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2500      	movs	r5, #0
 80033fe:	42a5      	cmp	r5, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003408:	4798      	blx	r3
 800340a:	3501      	adds	r5, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003412:	4798      	blx	r3
 8003414:	3501      	adds	r5, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003470 	.word	0x08003470
 800341c:	08003470 	.word	0x08003470
 8003420:	08003470 	.word	0x08003470
 8003424:	08003474 	.word	0x08003474

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
